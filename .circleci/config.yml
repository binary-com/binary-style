version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: Git restore cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - run:
          name: Compress git objects 
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  install_deps:
    description: "Install ruby and sass"
    steps:
      - run: 
          name: Installing ruby and sass
          command: |
            sudo apt-get update && sudo apt-get install -y ruby-full
            sudo gem install sass
  npm_install:
    description: "npm install and save cache"
    steps:
      - restore_cache:
          name: Restore npm save_cache
          keys:
            - node-{{ checksum "package-lock.json" }}
            - node-
      - run:
          name: Install npm packages
          command: npm install
      - save_cache:
          key: node-{{ checksum "package-lock.json" }}
          name: Save npm cache
          paths:
            - "node_modules"
  build:
    description: "Grunt build the project"
    steps:
      - run:
          name: "Build binary-style"
          command: npm run build
  deploy:
    description: "Deploy to static branches"
    parameters:
      target_branch:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Tag build
          command: echo "<< parameters.target_branch >> $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > dist/version
      - run:
          name: Install and configure dependencies
          command: |
            sudo npm install -g gh-pages@2.0.1
            git config user.email "ci-build@binary.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "01:67:4a:6d:26:9c:70:c4:1a:60:91:88:d9:dd:f0:83"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages -d dist --branch << parameters.target_branch >> --message '[skip ci]'
  docker_build_push:
    description: "Build Docker image"
    steps:
      - setup_remote_docker
      - run: 
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/binary-static-style:${CIRCLE_SHA1} -t ${DOCKHUB_ORGANISATION}/binary-static-style:latest .
      - run: 
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/binary-static-style:${CIRCLE_SHA1}
            docker push ${DOCKHUB_ORGANISATION}/binary-static-style:latest
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_namespace:
        type: string
        default: "style-binary-com-production"
      k8s_service:
        type: string
        default: "binary-static-style"
    steps:
      - k8s/install-kubectl
      - run: 
          name: Deploying to k8s cluster for service binary-style
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            export NAMESPACE=<< parameters.k8s_namespace >>
            git clone https://github.com/binary-com/devops-ci-scripts
            cd devops-ci-scripts/k8s-build_tools
            echo $CA_CRT | base64 --decode > ca.crt
            ./release.sh << parameters.k8s_service >> ${TAG}
  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for style.binary.com with version *$(cat dist/version)*"
          success_message: "Release succeeded for style.binary.com with version *$(cat dist/version)*"
          webhook: ${SLACK_WEBHOOK}
  publish_to_pages_staging:
    description: "Publish to cloudflare pages"
    steps:
      - run:
          name: "Publish to cloudflare pages (staging)"
          command: |
            cd dist
            npx wrangler pages publish . --project-name=binary-style-pages --branch=staging
            echo "New staging website - http://staging.cf-pages-binary-style.binary.com"

  publish_to_pages_production:
    description: "Publish to cloudflare pages"
    steps:
      - run:
          name: "Publish to cloudflare pages (production)"
          command: |
            cd dist
            npx wrangler pages publish . --project-name=binary-style-pages --branch=main
            echo "New website - http://cf-pages-binary-style.binary.com"
jobs:
  build:
    docker:
      - image: circleci/node:9.9.0-stretch
    steps:
      - git_checkout_from_cache
      - install_deps
      - npm_install
      - build
  release_staging:
    docker:
      - image: circleci/node:9.9.0-stretch
    steps:
      - git_checkout_from_cache
      - install_deps
      - npm_install
      - build
      - persist_to_workspace:
          root: dist
          paths:
            - .
  release_production:
    docker:
      - image: circleci/node:9.9.0-stretch
    steps:
      - git_checkout_from_cache
      - install_deps
      - npm_install
      - build
      - persist_to_workspace:
          root: dist
          paths:
            - .
      - deploy:
          target_branch: "production"
      - notify_slack
  release_aws_production:
    docker:
      - image: circleci/node:9.9.0-stretch
    steps:
      - git_checkout_from_cache
      - install_deps
      - npm_install
      - build
      - docker_build_push
      - k8s_deploy
  publish_cloudflare_staging:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - attach_workspace:
          at: dist
      - publish_to_pages_staging
  publish_cloudflare_production:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - attach_workspace:
          at: dist
      - publish_to_pages_production
      
workflows:
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^master$/
  release:
    jobs:
      - release_staging:
          filters:
            branches:
              only: /^master$/
      - release_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
      - release_aws_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
          context: binary-frontend-artifact-upload
      - publish_cloudflare_staging:
          requires:
            - release_staging
          filters:
            branches:
              only: /^master$/
          context: binary-frontend-artifact-upload
      - publish_cloudflare_production:
          requires:
            - release_production
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
          context: binary-frontend-artifact-upload
